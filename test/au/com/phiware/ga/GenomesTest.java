package au.com.phiware.ga;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import au.com.phiware.ga.Genomes.DataInputStream;
import au.com.phiware.ga.Genomes.DataOutputStream;

public class GenomesTest {
	static byte[] genome = new byte[] { 1, 2, 4, 8 };
	static byte[] invGenome = new byte[] { -2, -3, -5, -9 };
	static byte[] phenome = new byte[] { 1, 2, 3, 4 };
	
	static int[] byteGenoIn = new int[] {
		   0,   1,   2,   3,   4,   5,   6,   7,
		   8,   9,  10,  11,  12,  13,  14,  15,
		  16,  17,  18,  19,  20,  21,  22,  23,
		  24,  25,  26,  27,  28,  29,  30,  31,
		  32,  33,  34,  35,  36,  37,  38,  39,
		  40,  41,  42,  43,  44,  45,  46,  47,
		  48,  49,  50,  51,  52,  53,  54,  55,
		  56,  57,  58,  59,  60,  61,  62,  63,
		  64,  65,  66,  67,  68,  69,  70,  71,
		  72,  73,  74,  75,  76,  77,  78,  79,
		  80,  81,  82,  83,  84,  85,  86,  87,
		  88,  89,  90,  91,  92,  93,  94,  95,
		  96,  97,  98,  99, 100, 101, 102, 103,
		 104, 105, 106, 107, 108, 109, 110, 111,
		 112, 113, 114, 115, 116, 117, 118, 119,
		 120, 121, 122, 123, 124, 125, 126, 127,
		 128, 129, 130, 131, 132, 133, 134, 135,
		 136, 137, 138, 139, 140, 141, 142, 143,
		 144, 145, 146, 147, 148, 149, 150, 151,
		 152, 153, 154, 155, 156, 157, 158, 159,
		 160, 161, 162, 163, 164, 165, 166, 167,
		 168, 169, 170, 171, 172, 173, 174, 175,
		 176, 177, 178, 179, 180, 181, 182, 183,
		 184, 185, 186, 187, 188, 189, 190, 191,
		 192, 193, 194, 195, 196, 197, 198, 199,
		 200, 201, 202, 203, 204, 205, 206, 207,
		 208, 209, 210, 211, 212, 213, 214, 215,
		 216, 217, 218, 219, 220, 221, 222, 223,
		 224, 225, 226, 227, 228, 229, 230, 231,
		 232, 233, 234, 235, 236, 237, 238, 239,
		 240, 241, 242, 243, 244, 245, 246, 247,
		 248, 249, 250, 251, 252, 253, 254, 255
	};
	static byte[] byteGenoOut = new byte[] {
		      0,    1,    2,    4,    8,   16,   32,   64,
		   -128,    3,    5,    9,   17,   33,   65, -127,
		      6,   10,   18,   34,   66, -126,   12,   20,
		     36,   68, -124,   24,   40,   72, -120,   48,
		     80, -112,   96,  -96,  -64,    7,   11,   19,
		     35,   67, -125,   13,   21,   37,   69, -123,
		     25,   41,   73, -119,   49,   81, -111,   97,
		    -95,  -63,   14,   22,   38,   70, -122,   26,
		     42,   74, -118,   50,   82, -110,   98,  -94,
		    -62,   28,   44,   76, -116,   52,   84, -108,
		    100,  -92,  -60,   56,   88, -104,  104,  -88,
		    -56,  112,  -80,  -48,  -32,   15,   23,   39,
		     71, -121,   27,   43,   75, -117,   51,   83,
		   -109,   99,  -93,  -61,   29,   45,   77, -115,
		     53,   85, -107,  101,  -91,  -59,   57,   89,
		   -103,  105,  -87,  -55,  113,  -79,  -47,  -31,
		     30,   46,   78, -114,   54,   86, -106,  102,
		    -90,  -58,   58,   90, -102,  106,  -86,  -54,
		    114,  -78,  -46,  -30,   60,   92, -100,  108,
		    -84,  -52,  116,  -76,  -44,  -28,  120,  -72,
		    -40,  -24,  -16,   31,   47,   79, -113,   55,
		     87, -105,  103,  -89,  -57,   59,   91, -101,
		    107,  -85,  -53,  115,  -77,  -45,  -29,   61,
		     93,  -99,  109,  -83,  -51,  117,  -75,  -43,
		    -27,  121,  -71,  -39,  -23,  -15,   62,   94,
		    -98,  110,  -82,  -50,  118,  -74,  -42,  -26,
		    122,  -70,  -38,  -22,  -14,  124,  -68,  -36,
		    -20,  -12,   -8,   63,   95,  -97,  111,  -81,
		    -49,  119,  -73,  -41,  -25,  123,  -69,  -37,
		    -21,  -13,  125,  -67,  -35,  -19,  -11,   -7,
		    126,  -66,  -34,  -18,  -10,   -6,   -4,  127,
		    -65,  -33,  -17,   -9,   -5,   -3,   -2,   -1
	};
	static String bytesGenoIn = "01234567";
	static byte[] bytesGenoOut = new byte[] {25, 41, 73, -119, 49, 81, -111, 97}; 

	static int[] shortGenoIn = new int[] {
	    0,    1,    2,    3,    4,    5,    6,    7,
	    8,    9,   10,   11,   12,   13,   14,   15,
	   16,   17,   18,   19,   20,   21,   22,   23,
	   24,   25,   26,   27,   28,   29,   30,   31,
	   32,   33,   34,   35,   36,   37,   38,   39,
	   40,   41,   42,   43,   44,   45,   46,   47,
	   48,   49,   50,   51,   52,   53,   54,   55,
	   56,   57,   58,   59,   60,   61,   62,   63,
	   64,   65,   66,   67,   68,   69,   70,   71,
	   72,   73,   74,   75,   76,   77,   78,   79,
	   80,   81,   82,   83,   84,   85,   86,   87,
	   88,   89,   90,   91,   92,   93,   94,   95,
	   96,   97,   98,   99,  100,  101,  102,  103,
	  104,  105,  106,  107,  108,  109,  110,  111,
	  112,  113,  114,  115,  116,  117,  118,  119,
	  120,  121,  122,  123,  124,  125,  126,  127,
	  128,  129,  130,  131,  132,  133,  134,  135,
	  136,  137,  138,  139,  140,  141,  142,  143,
	  144,  145,  146,  147,  148,  149,  150,  151,
	  152,  153,  154,  155,  156,  157,  158,  159,
	  160,  161,  162,  163,  164,  165,  166,  167,
	  168,  169,  170,  171,  172,  173,  174,  175,
	  176,  177,  178,  179,  180,  181,  182,  183,
	  184,  185,  186,  187,  188,  189,  190,  191,
	  192,  193,  194,  195,  196,  197,  198,  199,
	  200,  201,  202,  203,  204,  205,  206,  207,
	  208,  209,  210,  211,  212,  213,  214,  215,
	  216,  217,  218,  219,  220,  221,  222,  223,
	  224,  225,  226,  227,  228,  229,  230,  231,
	  232,  233,  234,  235,  236,  237,  238,  239,
	  240,  241,  242,  243,  244,  245,  246,  247,
	  248,  249,  250,  251,  252,  253,  254,  255,
	65280,65281,65282,65283,65284,65285,65286,65287,
	65288,65289,65290,65291,65292,65293,65294,65295,
	65296,65297,65298,65299,65300,65301,65302,65303,
	65304,65305,65306,65307,65308,65309,65310,65311,
	65312,65313,65314,65315,65316,65317,65318,65319,
	65320,65321,65322,65323,65324,65325,65326,65327,
	65328,65329,65330,65331,65332,65333,65334,65335,
	65336,65337,65338,65339,65340,65341,65342,65343,
	65344,65345,65346,65347,65348,65349,65350,65351,
	65352,65353,65354,65355,65356,65357,65358,65359,
	65360,65361,65362,65363,65364,65365,65366,65367,
	65368,65369,65370,65371,65372,65373,65374,65375,
	65376,65377,65378,65379,65380,65381,65382,65383,
	65384,65385,65386,65387,65388,65389,65390,65391,
	65392,65393,65394,65395,65396,65397,65398,65399,
	65400,65401,65402,65403,65404,65405,65406,65407,
	65408,65409,65410,65411,65412,65413,65414,65415,
	65416,65417,65418,65419,65420,65421,65422,65423,
	65424,65425,65426,65427,65428,65429,65430,65431,
	65432,65433,65434,65435,65436,65437,65438,65439,
	65440,65441,65442,65443,65444,65445,65446,65447,
	65448,65449,65450,65451,65452,65453,65454,65455,
	65456,65457,65458,65459,65460,65461,65462,65463,
	65464,65465,65466,65467,65468,65469,65470,65471,
	65472,65473,65474,65475,65476,65477,65478,65479,
	65480,65481,65482,65483,65484,65485,65486,65487,
	65488,65489,65490,65491,65492,65493,65494,65495,
	65496,65497,65498,65499,65500,65501,65502,65503,
	65504,65505,65506,65507,65508,65509,65510,65511,
	65512,65513,65514,65515,65516,65517,65518,65519,
	65520,65521,65522,65523,65524,65525,65526,65527,
	65528,65529,65530,65531,65532,65533,65534,65535
	};
	static byte[] shortGenoOut = new byte[] {
		   0,   0,   0,   1,   0,   2,   0,   4,   0,   8,   0,  16,   0,  32,   0,  64,
		   0,-128,   1,   0,   2,   0,   4,   0,   8,   0,  16,   0,  32,   0,  64,   0,
		-128,   0,   0,   3,   0,   5,   0,   9,   0,  17,   0,  33,   0,  65,   0,-127,
		   1,   1,   2,   1,   4,   1,   8,   1,  16,   1,  32,   1,  64,   1,-128,   1,
		   0,   6,   0,  10,   0,  18,   0,  34,   0,  66,   0,-126,   1,   2,   2,   2,
		   4,   2,   8,   2,  16,   2,  32,   2,  64,   2,-128,   2,   0,  12,   0,  20,
		   0,  36,   0,  68,   0,-124,   1,   4,   2,   4,   4,   4,   8,   4,  16,   4,
		  32,   4,  64,   4,-128,   4,   0,  24,   0,  40,   0,  72,   0,-120,   1,   8,
		   2,   8,   4,   8,   8,   8,  16,   8,  32,   8,  64,   8,-128,   8,   0,  48,
		   0,  80,   0,-112,   1,  16,   2,  16,   4,  16,   8,  16,  16,  16,  32,  16,
		  64,  16,-128,  16,   0,  96,   0, -96,   1,  32,   2,  32,   4,  32,   8,  32,
		  16,  32,  32,  32,  64,  32,-128,  32,   0, -64,   1,  64,   2,  64,   4,  64,
		   8,  64,  16,  64,  32,  64,  64,  64,-128,  64,   1,-128,   2,-128,   4,-128,
		   8,-128,  16,-128,  32,-128,  64,-128,-128,-128,   3,   0,   5,   0,   9,   0,
		  17,   0,  33,   0,  65,   0,-127,   0,   6,   0,  10,   0,  18,   0,  34,   0,
		  66,   0,-126,   0,  12,   0,  20,   0,  36,   0,  68,   0,-124,   0,  24,   0,
		  40,   0,  72,   0,-120,   0,  48,   0,  80,   0,-112,   0,  96,   0, -96,   0,
		 -64,   0,   0,   7,   0,  11,   0,  19,   0,  35,   0,  67,   0,-125,   1,   3,
		   2,   3,   4,   3,   8,   3,  16,   3,  32,   3,  64,   3,-128,   3,   0,  13,
		   0,  21,   0,  37,   0,  69,   0,-123,   1,   5,   2,   5,   4,   5,   8,   5,
		  16,   5,  32,   5,  64,   5,-128,   5,   0,  25,   0,  41,   0,  73,   0,-119,
		   1,   9,   2,   9,   4,   9,   8,   9,  16,   9,  32,   9,  64,   9,-128,   9,
		   0,  49,   0,  81,   0,-111,   1,  17,   2,  17,   4,  17,   8,  17,  16,  17,
		  32,  17,  64,  17,-128,  17,   0,  97,   0, -95,   1,  33,   2,  33,   4,  33,
		   8,  33,  16,  33,  32,  33,  64,  33,-128,  33,   0, -63,   1,  65,   2,  65,
		   4,  65,   8,  65,  16,  65,  32,  65,  64,  65,-128,  65,   1,-127,   2,-127,
		   4,-127,   8,-127,  16,-127,  32,-127,  64,-127,-128,-127,   3,   1,   5,   1,
		   9,   1,  17,   1,  33,   1,  65,   1,-127,   1,   6,   1,  10,   1,  18,   1,
		  34,   1,  66,   1,-126,   1,  12,   1,  20,   1,  36,   1,  68,   1,-124,   1,
		  24,   1,  40,   1,  72,   1,-120,   1,  48,   1,  80,   1,-112,   1,  96,   1,
		 -96,   1, -64,   1,   0,  14,   0,  22,   0,  38,   0,  70,   0,-122,   1,   6,
		   2,   6,   4,   6,   8,   6,  16,   6,  32,   6,  64,   6,-128,   6,   0,  26,
		  -1, -27, 127,  -7, -65,  -7, -33,  -7, -17,  -7,  -9,  -7,  -5,  -7,  -3,  -7,
		  -2,  -7,  -1, 121,  -1, -71,  -1, -39,  -1, -23,  -1, -15,  63,  -2,  95,  -2,
		 -97,  -2, 111,  -2, -81,  -2, -49,  -2, 119,  -2, -73,  -2, -41,  -2, -25,  -2,
		 123,  -2, -69,  -2, -37,  -2, -21,  -2, -13,  -2, 125,  -2, -67,  -2, -35,  -2,
		 -19,  -2, -11,  -2,  -7,  -2, 126,  -2, -66,  -2, -34,  -2, -18,  -2, -10,  -2,
		  -6,  -2,  -4,  -2, 127, 126, -65, 126, -33, 126, -17, 126,  -9, 126,  -5, 126,
		  -3, 126,  -2, 126, 127, -66, -65, -66, -33, -66, -17, -66,  -9, -66,  -5, -66,
		  -3, -66,  -2, -66,  -1,  62, 127, -34, -65, -34, -33, -34, -17, -34,  -9, -34,
		  -5, -34,  -3, -34,  -2, -34,  -1,  94,  -1, -98, 127, -18, -65, -18, -33, -18,
		 -17, -18,  -9, -18,  -5, -18,  -3, -18,  -2, -18,  -1, 110,  -1, -82,  -1, -50,
		 127, -10, -65, -10, -33, -10, -17, -10,  -9, -10,  -5, -10,  -3, -10,  -2, -10,
		  -1, 118,  -1, -74,  -1, -42,  -1, -26, 127,  -6, -65,  -6, -33,  -6, -17,  -6,
		  -9,  -6,  -5,  -6,  -3,  -6,  -2,  -6,  -1, 122,  -1, -70,  -1, -38,  -1, -22,
		  -1, -14, 127,  -4, -65,  -4, -33,  -4, -17,  -4,  -9,  -4,  -5,  -4,  -3,  -4,
		  -2,  -4,  -1, 124,  -1, -68,  -1, -36,  -1, -20,  -1, -12,  -1,  -8,  63,  -1,
		  95,  -1, -97,  -1, 111,  -1, -81,  -1, -49,  -1, 119,  -1, -73,  -1, -41,  -1,
		 -25,  -1, 123,  -1, -69,  -1, -37,  -1, -21,  -1, -13,  -1, 125,  -1, -67,  -1,
		 -35,  -1, -19,  -1, -11,  -1,  -7,  -1, 126,  -1, -66,  -1, -34,  -1, -18,  -1,
		 -10,  -1,  -6,  -1,  -4,  -1, 127, 127, -65, 127, -33, 127, -17, 127,  -9, 127,
		  -5, 127,  -3, 127,  -2, 127, 127, -65, -65, -65, -33, -65, -17, -65,  -9, -65,
		  -5, -65,  -3, -65,  -2, -65,  -1,  63, 127, -33, -65, -33, -33, -33, -17, -33,
		  -9, -33,  -5, -33,  -3, -33,  -2, -33,  -1,  95,  -1, -97, 127, -17, -65, -17,
		 -33, -17, -17, -17,  -9, -17,  -5, -17,  -3, -17,  -2, -17,  -1, 111,  -1, -81,
		  -1, -49, 127,  -9, -65,  -9, -33,  -9, -17,  -9,  -9,  -9,  -5,  -9,  -3,  -9,
		  -2,  -9,  -1, 119,  -1, -73,  -1, -41,  -1, -25, 127,  -5, -65,  -5, -33,  -5,
		 -17,  -5,  -9,  -5,  -5,  -5,  -3,  -5,  -2,  -5,  -1, 123,  -1, -69,  -1, -37,
		  -1, -21,  -1, -13, 127,  -3, -65,  -3, -33,  -3, -17,  -3,  -9,  -3,  -5,  -3,
		  -3,  -3,  -2,  -3,  -1, 125,  -1, -67,  -1, -35,  -1, -19,  -1, -11,  -1,  -7,
		 127,  -2, -65,  -2, -33,  -2, -17,  -2,  -9,  -2,  -5,  -2,  -3,  -2,  -2,  -2,
		  -1, 126,  -1, -66,  -1, -34,  -1, -18,  -1, -10,  -1,  -6,  -1,  -4, 127,  -1,
		 -65,  -1, -33,  -1, -17,  -1,  -9,  -1,  -5,  -1,  -3,  -1,  -2,  -1,  -1, 127,
		  -1, -65,  -1, -33,  -1, -17,  -1,  -9,  -1,  -5,  -1,  -3,  -1,  -2,  -1,  -1
	};
	static String charsGenoIn = "01234567";
	static byte[] charsGenoOut = new byte[] {0, 36, 0, 68, 0,-124, 1, 4, 2, 4, 4, 4, 8, 4, 16, 4}; 

	static int[] intGenoIn = new int[] {
	    0,    1,    2,    3,
	    4,    5,    6,    7,
	    8,    9,   10,   11,
	   12,   13,   14,   15,
	   16,   17,   18,   19,
	   20,   21,   22,   23,
	   24,   25,   26,   27,
	   28,   29,   30,   31,
	   32,   33,   34,   35,
	   36,   37,   38,   39,
	   40,   41,   42,   43,
	   44,   45,   46,   47,
	   48,   49,   50,   51,
	   52,   53,   54,   55,
	   56,   57,   58,   59,
	   60,   61,   62,   63,
	   64,   65,   66,   67,
	   68,   69,   70,   71,
	   72,   73,   74,   75,
	   76,   77,   78,   79,
	   80,   81,   82,   83,
	   84,   85,   86,   87,
	   88,   89,   90,   91,
	   92,   93,   94,   95,
	   96,   97,   98,   99,
	  100,  101,  102,  103,
	  104,  105,  106,  107,
	  108,  109,  110,  111,
	  112,  113,  114,  115,
	  116,  117,  118,  119,
	  120,  121,  122,  123,
	  124,  125,  126,  127,
	  128,  129,  130,  131,
	  132,  133,  134,  135,
	  136,  137,  138,  139,
	  140,  141,  142,  143,
	  144,  145,  146,  147,
	  148,  149,  150,  151,
	  152,  153,  154,  155,
	  156,  157,  158,  159,
	  160,  161,  162,  163,
	  164,  165,  166,  167,
	  168,  169,  170,  171,
	  172,  173,  174,  175,
	  176,  177,  178,  179,
	  180,  181,  182,  183,
	  184,  185,  186,  187,
	  188,  189,  190,  191,
	  192,  193,  194,  195,
	  196,  197,  198,  199,
	  200,  201,  202,  203,
	  204,  205,  206,  207,
	  208,  209,  210,  211,
	  212,  213,  214,  215,
	  216,  217,  218,  219,
	  220,  221,  222,  223,
	  224,  225,  226,  227,
	  228,  229,  230,  231,
	  232,  233,  234,  235,
	  236,  237,  238,  239,
	  240,  241,  242,  243,
	  244,  245,  246,  247,
	  248,  249,  250,  251,
	  252,  253,  254,  255,
	 -255, -254, -253, -252,
	 -251, -250, -249, -248,
	 -247, -246, -245, -244,
	 -243, -242, -241, -240,
	 -239, -238, -237, -236,
	 -235, -234, -233, -232,
	 -231, -230, -229, -228,
	 -227, -226, -225, -224,
	 -223, -222, -221, -220,
	 -219, -218, -217, -216,
	 -215, -214, -213, -212,
	 -211, -210, -209, -208,
	 -207, -206, -205, -204,
	 -203, -202, -201, -200,
	 -199, -198, -197, -196,
	 -195, -194, -193, -192,
	 -191, -190, -189, -188,
	 -187, -186, -185, -184,
	 -183, -182, -181, -180,
	 -179, -178, -177, -176,
	 -175, -174, -173, -172,
	 -171, -170, -169, -168,
	 -167, -166, -165, -164,
	 -163, -162, -161, -160,
	 -159, -158, -157, -156,
	 -155, -154, -153, -152,
	 -151, -150, -149, -148,
	 -147, -146, -145, -144,
	 -143, -142, -141, -140,
	 -139, -138, -137, -136,
	 -135, -134, -133, -132,
	 -131, -130, -129, -128,
	 -127, -126, -125, -124,
	 -123, -122, -121, -120,
	 -119, -118, -117, -116,
	 -115, -114, -113, -112,
	 -111, -110, -109, -108,
	 -107, -106, -105, -104,
	 -103, -102, -101, -100,
	  -99,  -98,  -97,  -96,
	  -95,  -94,  -93,  -92,
	  -91,  -90,  -89,  -88,
	  -87,  -86,  -85,  -84,
	  -83,  -82,  -81,  -80,
	  -79,  -78,  -77,  -76,
	  -75,  -74,  -73,  -72,
	  -71,  -70,  -69,  -68,
	  -67,  -66,  -65,  -64,
	  -63,  -62,  -61,  -60,
	  -59,  -58,  -57,  -56,
	  -55,  -54,  -53,  -52,
	  -51,  -50,  -49,  -48,
	  -47,  -46,  -45,  -44,
	  -43,  -42,  -41,  -40,
	  -39,  -38,  -37,  -36,
	  -35,  -34,  -33,  -32,
	  -31,  -30,  -29,  -28,
	  -27,  -26,  -25,  -24,
	  -23,  -22,  -21,  -20,
	  -19,  -18,  -17,  -16,
	  -15,  -14,  -13,  -12,
	  -11,  -10,   -9,   -8,
	   -7,   -6,   -5,   -4,
	   -3,   -2,   -1
	};
	static byte[] intGenoOut = new byte[] {
		   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   2,   0,   0,   0,   4,
		   0,   0,   0,   8,   0,   0,   0,  16,   0,   0,   0,  32,   0,   0,   0,  64,
		   0,   0,   0,-128,   0,   0,   1,   0,   0,   0,   2,   0,   0,   0,   4,   0,
		   0,   0,   8,   0,   0,   0,  16,   0,   0,   0,  32,   0,   0,   0,  64,   0,
		   0,   0,-128,   0,   0,   1,   0,   0,   0,   2,   0,   0,   0,   4,   0,   0,
		   0,   8,   0,   0,   0,  16,   0,   0,   0,  32,   0,   0,   0,  64,   0,   0,
		   0,-128,   0,   0,   1,   0,   0,   0,   2,   0,   0,   0,   4,   0,   0,   0,
		   8,   0,   0,   0,  16,   0,   0,   0,  32,   0,   0,   0,  64,   0,   0,   0,
		-128,   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   5,   0,   0,   0,   9,
		   0,   0,   0,  17,   0,   0,   0,  33,   0,   0,   0,  65,   0,   0,   0,-127,
		   0,   0,   1,   1,   0,   0,   2,   1,   0,   0,   4,   1,   0,   0,   8,   1,
		   0,   0,  16,   1,   0,   0,  32,   1,   0,   0,  64,   1,   0,   0,-128,   1,
		   0,   1,   0,   1,   0,   2,   0,   1,   0,   4,   0,   1,   0,   8,   0,   1,
		   0,  16,   0,   1,   0,  32,   0,   1,   0,  64,   0,   1,   0,-128,   0,   1,
		   1,   0,   0,   1,   2,   0,   0,   1,   4,   0,   0,   1,   8,   0,   0,   1,
		  16,   0,   0,   1,  32,   0,   0,   1,  64,   0,   0,   1,-128,   0,   0,   1,
		   0,   0,   0,   6,   0,   0,   0,  10,   0,   0,   0,  18,   0,   0,   0,  34,
		   0,   0,   0,  66,   0,   0,   0,-126,   0,   0,   1,   2,   0,   0,   2,   2,
		   0,   0,   4,   2,   0,   0,   8,   2,   0,   0,  16,   2,   0,   0,  32,   2,
		   0,   0,  64,   2,   0,   0,-128,   2,   0,   1,   0,   2,   0,   2,   0,   2,
		   0,   4,   0,   2,   0,   8,   0,   2,   0,  16,   0,   2,   0,  32,   0,   2,
		   0,  64,   0,   2,   0,-128,   0,   2,   1,   0,   0,   2,   2,   0,   0,   2,
		   4,   0,   0,   2,   8,   0,   0,   2,  16,   0,   0,   2,  32,   0,   0,   2,
		  64,   0,   0,   2,-128,   0,   0,   2,   0,   0,   0,  12,   0,   0,   0,  20,
		   0,   0,   0,  36,   0,   0,   0,  68,   0,   0,   0,-124,   0,   0,   1,   4,
		   0,   0,   2,   4,   0,   0,   4,   4,   0,   0,   8,   4,   0,   0,  16,   4,
		   0,   0,  32,   4,   0,   0,  64,   4,   0,   0,-128,   4,   0,   1,   0,   4,
		   0,   2,   0,   4,   0,   4,   0,   4,   0,   8,   0,   4,   0,  16,   0,   4,
		   0,  32,   0,   4,   0,  64,   0,   4,   0,-128,   0,   4,   1,   0,   0,   4,
		   2,   0,   0,   4,   4,   0,   0,   4,   8,   0,   0,   4,  16,   0,   0,   4,
		  32,   0,   0,   4,  64,   0,   0,   4,-128,   0,   0,   4,   0,   0,   0,  24,
		   0,   0,   0,  40,   0,   0,   0,  72,   0,   0,   0,-120,   0,   0,   1,   8,
		   0,   0,   2,   8,   0,   0,   4,   8,   0,   0,   8,   8,   0,   0,  16,   8,
		   0,   0,  32,   8,   0,   0,  64,   8,   0,   0,-128,   8,   0,   1,   0,   8,
		   0,   2,   0,   8,   0,   4,   0,   8,   0,   8,   0,   8,   0,  16,   0,   8,
		   0,  32,   0,   8,   0,  64,   0,   8,   0,-128,   0,   8,   1,   0,   0,   8,
		   2,   0,   0,   8,   4,   0,   0,   8,   8,   0,   0,   8,  16,   0,   0,   8,
		  32,   0,   0,   8,  64,   0,   0,   8,-128,   0,   0,   8,   0,   0,   0,  48,
		   0,   0,   0,  80,   0,   0,   0,-112,   0,   0,   1,  16,   0,   0,   2,  16,
		   0,   0,   4,  16,   0,   0,   8,  16,   0,   0,  16,  16,   0,   0,  32,  16,
		   0,   0,  64,  16,   0,   0,-128,  16,   0,   1,   0,  16,   0,   2,   0,  16,
		   0,   4,   0,  16,   0,   8,   0,  16,   0,  16,   0,  16,   0,  32,   0,  16,
		   0,  64,   0,  16,   0,-128,   0,  16,   1,   0,   0,  16,   2,   0,   0,  16,
		   4,   0,   0,  16,   8,   0,   0,  16,  16,   0,   0,  16,  32,   0,   0,  16,
		  64,   0,   0,  16,-128,   0,   0,  16,   0,   0,   0,  96,   0,   0,   0, -96,
		   0,   0,   1,  32,   0,   0,   2,  32,   0,   0,   4,  32,   0,   0,   8,  32,
		   0,   0,  16,  32,   0,   0,  32,  32,   0,   0,  64,  32,   0,   0,-128,  32,
		   0,   1,   0,  32,   0,   2,   0,  32,   0,   4,   0,  32,   0,   8,   0,  32,
		   0,  16,   0,  32,   0,  32,   0,  32,   0,  64,   0,  32,   0,-128,   0,  32,
		   1,   0,   0,  32,   2,   0,   0,  32,   4,   0,   0,  32,   8,   0,   0,  32,
		  16,   0,   0,  32,  32,   0,   0,  32,  64,   0,   0,  32,-128,   0,   0,  32,
		   0,   0,   0, -64,   0,   0,   1,  64,   0,   0,   2,  64,   0,   0,   4,  64,
		   0,   0,   8,  64,   0,   0,  16,  64,   0,   0,  32,  64,   0,   0,  64,  64,
		   0,   0,-128,  64,   0,   1,   0,  64,   0,   2,   0,  64,   0,   4,   0,  64,
		   0,   8,   0,  64,   0,  16,   0,  64,   0,  32,   0,  64,   0,  64,   0,  64,
		   0,-128,   0,  64,   1,   0,   0,  64,   2,   0,   0,  64,   4,   0,   0,  64,
		   8,   0,   0,  64,  16,   0,   0,  64,  32,   0,   0,  64,  64,   0,   0,  64,
		-128,   0,   0,  64,   0,   0,   1,-128,   0,   0,   2,-128,   0,   0,   4,-128,
		   0,   0,   8,-128,   0,   0,  16,-128,   0,   0,  32,-128,   0,   0,  64,-128,
		   0,   0,-128,-128,   0,   1,   0,-128,   0,   2,   0,-128,   0,   4,   0,-128,
		   0,   8,   0,-128,   0,  16,   0,-128,   0,  32,   0,-128,   0,  64,   0,-128,
		   0,-128,   0,-128,   1,   0,   0,-128,   2,   0,   0,-128,   4,   0,   0,-128,
		   8,   0,   0,-128,  16,   0,   0,-128,  32,   0,   0,-128,  64,   0,   0,-128,
		-128,   0,   0,-128,   0,   0,   3,   0,   0,   0,   5,   0,   0,   0,   9,   0,
		  -1,  -1,  -6,  -1,  -1,  -1,  -4,  -1, 127,  -1,  -1, 127, -65,  -1,  -1, 127,
		 -33,  -1,  -1, 127, -17,  -1,  -1, 127,  -9,  -1,  -1, 127,  -5,  -1,  -1, 127,
		  -3,  -1,  -1, 127,  -2,  -1,  -1, 127,  -1, 127,  -1, 127,  -1, -65,  -1, 127,
		  -1, -33,  -1, 127,  -1, -17,  -1, 127,  -1,  -9,  -1, 127,  -1,  -5,  -1, 127,
		  -1,  -3,  -1, 127,  -1,  -2,  -1, 127,  -1,  -1, 127, 127,  -1,  -1, -65, 127,
		  -1,  -1, -33, 127,  -1,  -1, -17, 127,  -1,  -1,  -9, 127,  -1,  -1,  -5, 127,
		  -1,  -1,  -3, 127,  -1,  -1,  -2, 127, 127,  -1,  -1, -65, -65,  -1,  -1, -65,
		 -33,  -1,  -1, -65, -17,  -1,  -1, -65,  -9,  -1,  -1, -65,  -5,  -1,  -1, -65,
		  -3,  -1,  -1, -65,  -2,  -1,  -1, -65,  -1, 127,  -1, -65,  -1, -65,  -1, -65,
		  -1, -33,  -1, -65,  -1, -17,  -1, -65,  -1,  -9,  -1, -65,  -1,  -5,  -1, -65,
		  -1,  -3,  -1, -65,  -1,  -2,  -1, -65,  -1,  -1, 127, -65,  -1,  -1, -65, -65,
		  -1,  -1, -33, -65,  -1,  -1, -17, -65,  -1,  -1,  -9, -65,  -1,  -1,  -5, -65,
		  -1,  -1,  -3, -65,  -1,  -1,  -2, -65,  -1,  -1,  -1,  63, 127,  -1,  -1, -33,
		 -65,  -1,  -1, -33, -33,  -1,  -1, -33, -17,  -1,  -1, -33,  -9,  -1,  -1, -33,
		  -5,  -1,  -1, -33,  -3,  -1,  -1, -33,  -2,  -1,  -1, -33,  -1, 127,  -1, -33,
		  -1, -65,  -1, -33,  -1, -33,  -1, -33,  -1, -17,  -1, -33,  -1,  -9,  -1, -33,
		  -1,  -5,  -1, -33,  -1,  -3,  -1, -33,  -1,  -2,  -1, -33,  -1,  -1, 127, -33,
		  -1,  -1, -65, -33,  -1,  -1, -33, -33,  -1,  -1, -17, -33,  -1,  -1,  -9, -33,
		  -1,  -1,  -5, -33,  -1,  -1,  -3, -33,  -1,  -1,  -2, -33,  -1,  -1,  -1,  95,
		  -1,  -1,  -1, -97, 127,  -1,  -1, -17, -65,  -1,  -1, -17, -33,  -1,  -1, -17,
		 -17,  -1,  -1, -17,  -9,  -1,  -1, -17,  -5,  -1,  -1, -17,  -3,  -1,  -1, -17,
		  -2,  -1,  -1, -17,  -1, 127,  -1, -17,  -1, -65,  -1, -17,  -1, -33,  -1, -17,
		  -1, -17,  -1, -17,  -1,  -9,  -1, -17,  -1,  -5,  -1, -17,  -1,  -3,  -1, -17,
		  -1,  -2,  -1, -17,  -1,  -1, 127, -17,  -1,  -1, -65, -17,  -1,  -1, -33, -17,
		  -1,  -1, -17, -17,  -1,  -1,  -9, -17,  -1,  -1,  -5, -17,  -1,  -1,  -3, -17,
		  -1,  -1,  -2, -17,  -1,  -1,  -1, 111,  -1,  -1,  -1, -81,  -1,  -1,  -1, -49,
		 127,  -1,  -1,  -9, -65,  -1,  -1,  -9, -33,  -1,  -1,  -9, -17,  -1,  -1,  -9,
		  -9,  -1,  -1,  -9,  -5,  -1,  -1,  -9,  -3,  -1,  -1,  -9,  -2,  -1,  -1,  -9,
		  -1, 127,  -1,  -9,  -1, -65,  -1,  -9,  -1, -33,  -1,  -9,  -1, -17,  -1,  -9,
		  -1,  -9,  -1,  -9,  -1,  -5,  -1,  -9,  -1,  -3,  -1,  -9,  -1,  -2,  -1,  -9,
		  -1,  -1, 127,  -9,  -1,  -1, -65,  -9,  -1,  -1, -33,  -9,  -1,  -1, -17,  -9,
		  -1,  -1,  -9,  -9,  -1,  -1,  -5,  -9,  -1,  -1,  -3,  -9,  -1,  -1,  -2,  -9,
		  -1,  -1,  -1, 119,  -1,  -1,  -1, -73,  -1,  -1,  -1, -41,  -1,  -1,  -1, -25,
		 127,  -1,  -1,  -5, -65,  -1,  -1,  -5, -33,  -1,  -1,  -5, -17,  -1,  -1,  -5,
		  -9,  -1,  -1,  -5,  -5,  -1,  -1,  -5,  -3,  -1,  -1,  -5,  -2,  -1,  -1,  -5,
		  -1, 127,  -1,  -5,  -1, -65,  -1,  -5,  -1, -33,  -1,  -5,  -1, -17,  -1,  -5,
		  -1,  -9,  -1,  -5,  -1,  -5,  -1,  -5,  -1,  -3,  -1,  -5,  -1,  -2,  -1,  -5,
		  -1,  -1, 127,  -5,  -1,  -1, -65,  -5,  -1,  -1, -33,  -5,  -1,  -1, -17,  -5,
		  -1,  -1,  -9,  -5,  -1,  -1,  -5,  -5,  -1,  -1,  -3,  -5,  -1,  -1,  -2,  -5,
		  -1,  -1,  -1, 123,  -1,  -1,  -1, -69,  -1,  -1,  -1, -37,  -1,  -1,  -1, -21,
		  -1,  -1,  -1, -13, 127,  -1,  -1,  -3, -65,  -1,  -1,  -3, -33,  -1,  -1,  -3,
		 -17,  -1,  -1,  -3,  -9,  -1,  -1,  -3,  -5,  -1,  -1,  -3,  -3,  -1,  -1,  -3,
		  -2,  -1,  -1,  -3,  -1, 127,  -1,  -3,  -1, -65,  -1,  -3,  -1, -33,  -1,  -3,
		  -1, -17,  -1,  -3,  -1,  -9,  -1,  -3,  -1,  -5,  -1,  -3,  -1,  -3,  -1,  -3,
		  -1,  -2,  -1,  -3,  -1,  -1, 127,  -3,  -1,  -1, -65,  -3,  -1,  -1, -33,  -3,
		  -1,  -1, -17,  -3,  -1,  -1,  -9,  -3,  -1,  -1,  -5,  -3,  -1,  -1,  -3,  -3,
		  -1,  -1,  -2,  -3,  -1,  -1,  -1, 125,  -1,  -1,  -1, -67,  -1,  -1,  -1, -35,
		  -1,  -1,  -1, -19,  -1,  -1,  -1, -11,  -1,  -1,  -1,  -7, 127,  -1,  -1,  -2,
		 -65,  -1,  -1,  -2, -33,  -1,  -1,  -2, -17,  -1,  -1,  -2,  -9,  -1,  -1,  -2,
		  -5,  -1,  -1,  -2,  -3,  -1,  -1,  -2,  -2,  -1,  -1,  -2,  -1, 127,  -1,  -2,
		  -1, -65,  -1,  -2,  -1, -33,  -1,  -2,  -1, -17,  -1,  -2,  -1,  -9,  -1,  -2,
		  -1,  -5,  -1,  -2,  -1,  -3,  -1,  -2,  -1,  -2,  -1,  -2,  -1,  -1, 127,  -2,
		  -1,  -1, -65,  -2,  -1,  -1, -33,  -2,  -1,  -1, -17,  -2,  -1,  -1,  -9,  -2,
		  -1,  -1,  -5,  -2,  -1,  -1,  -3,  -2,  -1,  -1,  -2,  -2,  -1,  -1,  -1, 126,
		  -1,  -1,  -1, -66,  -1,  -1,  -1, -34,  -1,  -1,  -1, -18,  -1,  -1,  -1, -10,
		  -1,  -1,  -1,  -6,  -1,  -1,  -1,  -4, 127,  -1,  -1,  -1, -65,  -1,  -1,  -1,
		 -33,  -1,  -1,  -1, -17,  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -5,  -1,  -1,  -1,
		  -3,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -1, 127,  -1,  -1,  -1, -65,  -1,  -1,
		  -1, -33,  -1,  -1,  -1, -17,  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -5,  -1,  -1,
		  -1,  -3,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -1, 127,  -1,  -1,  -1, -65,  -1,
		  -1,  -1, -33,  -1,  -1,  -1, -17,  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -5,  -1,
		  -1,  -1,  -3,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -1, 127,  -1,  -1,  -1, -65,
		  -1,  -1,  -1, -33,  -1,  -1,  -1, -17,  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -5,
		  -1,  -1,  -1,  -3,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -1
	};

	static long[] longGenoIn = new long[] {
	    1,    2,
	    3,    4,
	    5,    6,
	    7,    8,
	    9,   10,
	   11,   12,
	   13,   14,
	   15,   16,
	   17,   18,
	   19,   20,
	   21,   22,
	   23,   24,
	   25,   26,
	   27,   28,
	   29,   30,
	   31,   32,
	   33,   34,
	   35,   36,
	   37,   38,
	   39,   40,
	   41,   42,
	   43,   44,
	   45,   46,
	   47,   48,
	   49,   50,
	   51,   52,
	   53,   54,
	   55,   56,
	   57,   58,
	   59,   60,
	   61,   62,
	   63,   64,
	   65,   66,
	   67,   68,
	   69,   70,
	   71,   72,
	   73,   74,
	   75,   76,
	   77,   78,
	   79,   80,
	   81,   82,
	   83,   84,
	   85,   86,
	   87,   88,
	   89,   90,
	   91,   92,
	   93,   94,
	   95,   96,
	   97,   98,
	   99,  100,
	  101,  102,
	  103,  104,
	  105,  106,
	  107,  108,
	  109,  110,
	  111,  112,
	  113,  114,
	  115,  116,
	  117,  118,
	  119,  120,
	  121,  122,
	  123,  124,
	  125,  126,
	  127,  128,
	  129,  130,
	  131,  132,
	  133,  134,
	  135,  136,
	  137,  138,
	  139,  140,
	  141,  142,
	  143,  144,
	  145,  146,
	  147,  148,
	  149,  150,
	  151,  152,
	  153,  154,
	  155,  156,
	  157,  158,
	  159,  160,
	  161,  162,
	  163,  164,
	  165,  166,
	  167,  168,
	  169,  170,
	  171,  172,
	  173,  174,
	  175,  176,
	  177,  178,
	  179,  180,
	  181,  182,
	  183,  184,
	  185,  186,
	  187,  188,
	  189,  190,
	  191,  192,
	  193,  194,
	  195,  196,
	  197,  198,
	  199,  200,
	  201,  202,
	  203,  204,
	  205,  206,
	  207,  208,
	  209,  210,
	  211,  212,
	  213,  214,
	  215,  216,
	  217,  218,
	  219,  220,
	  221,  222,
	  223,  224,
	  225,  226,
	  227,  228,
	  229,  230,
	  231,  232,
	  233,  234,
	  235,  236,
	  237,  238,
	  239,  240,
	  241,  242,
	  243,  244,
	  245,  246,
	  247,  248,
	  249,  250,
	  251,  252,
	  253,  254,
	  255, -255,
	 -254, -253,
	 -252, -251,
	 -250, -249,
	 -248, -247,
	 -246, -245,
	 -244, -243,
	 -242, -241,
	 -240, -239,
	 -238, -237,
	 -236, -235,
	 -234, -233,
	 -232, -231,
	 -230, -229,
	 -228, -227,
	 -226, -225,
	 -224, -223,
	 -222, -221,
	 -220, -219,
	 -218, -217,
	 -216, -215,
	 -214, -213,
	 -212, -211,
	 -210, -209,
	 -208, -207,
	 -206, -205,
	 -204, -203,
	 -202, -201,
	 -200, -199,
	 -198, -197,
	 -196, -195,
	 -194, -193,
	 -192, -191,
	 -190, -189,
	 -188, -187,
	 -186, -185,
	 -184, -183,
	 -182, -181,
	 -180, -179,
	 -178, -177,
	 -176, -175,
	 -174, -173,
	 -172, -171,
	 -170, -169,
	 -168, -167,
	 -166, -165,
	 -164, -163,
	 -162, -161,
	 -160, -159,
	 -158, -157,
	 -156, -155,
	 -154, -153,
	 -152, -151,
	 -150, -149,
	 -148, -147,
	 -146, -145,
	 -144, -143,
	 -142, -141,
	 -140, -139,
	 -138, -137,
	 -136, -135,
	 -134, -133,
	 -132, -131,
	 -130, -129,
	 -128, -127,
	 -126, -125,
	 -124, -123,
	 -122, -121,
	 -120, -119,
	 -118, -117,
	 -116, -115,
	 -114, -113,
	 -112, -111,
	 -110, -109,
	 -108, -107,
	 -106, -105,
	 -104, -103,
	 -102, -101,
	 -100,  -99,
	  -98,  -97,
	  -96,  -95,
	  -94,  -93,
	  -92,  -91,
	  -90,  -89,
	  -88,  -87,
	  -86,  -85,
	  -84,  -83,
	  -82,  -81,
	  -80,  -79,
	  -78,  -77,
	  -76,  -75,
	  -74,  -73,
	  -72,  -71,
	  -70,  -69,
	  -68,  -67,
	  -66,  -65,
	  -64,  -63,
	  -62,  -61,
	  -60,  -59,
	  -58,  -57,
	  -56,  -55,
	  -54,  -53,
	  -52,  -51,
	  -50,  -49,
	  -48,  -47,
	  -46,  -45,
	  -44,  -43,
	  -42,  -41,
	  -40,  -39,
	  -38,  -37,
	  -36,  -35,
	  -34,  -33,
	  -32,  -31,
	  -30,  -29,
	  -28,  -27,
	  -26,  -25,
	  -24,  -23,
	  -22,  -21,
	  -20,  -19,
	  -18,  -17,
	  -16,  -15,
	  -14,  -13,
	  -12,  -11,
	  -10,   -9,
	   -8,   -7,
	   -6,   -5,
	   -4,   -3,
	   -2,   -1
	};
	static byte[] longGenoOut = new byte[] {
		   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   2,
		   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   8,
		   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,  32,
		   0,   0,   0,   0,   0,   0,   0,  64,   0,   0,   0,   0,   0,   0,   0,-128,
		   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   2,   0,
		   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   8,   0,
		   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,  32,   0,
		   0,   0,   0,   0,   0,   0,  64,   0,   0,   0,   0,   0,   0,   0,-128,   0,
		   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,
		   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,
		   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,  32,   0,   0,
		   0,   0,   0,   0,   0,  64,   0,   0,   0,   0,   0,   0,   0,-128,   0,   0,
		   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,
		   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,
		   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,  32,   0,   0,   0,
		   0,   0,   0,   0,  64,   0,   0,   0,   0,   0,   0,   0,-128,   0,   0,   0,
		   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,
		   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,
		   0,   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,  32,   0,   0,   0,   0,
		   0,   0,   0,  64,   0,   0,   0,   0,   0,   0,   0,-128,   0,   0,   0,   0,
		   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,   0,
		   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,
		   0,   0,  16,   0,   0,   0,   0,   0,   0,   0,  32,   0,   0,   0,   0,   0,
		   0,   0,  64,   0,   0,   0,   0,   0,   0,   0,-128,   0,   0,   0,   0,   0,
		   0,   1,   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,   0,   0,
		   0,   4,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,
		   0,  16,   0,   0,   0,   0,   0,   0,   0,  32,   0,   0,   0,   0,   0,   0,
		   0,  64,   0,   0,   0,   0,   0,   0,   0,-128,   0,   0,   0,   0,   0,   0,
		   1,   0,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,   0,   0,   0,
		   4,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,
		  16,   0,   0,   0,   0,   0,   0,   0,  32,   0,   0,   0,   0,   0,   0,   0,
		  64,   0,   0,   0,   0,   0,   0,   0,-128,   0,   0,   0,   0,   0,   0,   0,
		   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   5,
		   0,   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,  17,
		   0,   0,   0,   0,   0,   0,   0,  33,   0,   0,   0,   0,   0,   0,   0,  65,
		   0,   0,   0,   0,   0,   0,   0,-127,   0,   0,   0,   0,   0,   0,   1,   1,
		   0,   0,   0,   0,   0,   0,   2,   1,   0,   0,   0,   0,   0,   0,   4,   1,
		   0,   0,   0,   0,   0,   0,   8,   1,   0,   0,   0,   0,   0,   0,  16,   1,
		   0,   0,   0,   0,   0,   0,  32,   1,   0,   0,   0,   0,   0,   0,  64,   1,
		   0,   0,   0,   0,   0,   0,-128,   1,   0,   0,   0,   0,   0,   1,   0,   1,
		   0,   0,   0,   0,   0,   2,   0,   1,   0,   0,   0,   0,   0,   4,   0,   1,
		   0,   0,   0,   0,   0,   8,   0,   1,   0,   0,   0,   0,   0,  16,   0,   1,
		   0,   0,   0,   0,   0,  32,   0,   1,   0,   0,   0,   0,   0,  64,   0,   1,
		   0,   0,   0,   0,   0,-128,   0,   1,   0,   0,   0,   0,   1,   0,   0,   1,
		   0,   0,   0,   0,   2,   0,   0,   1,   0,   0,   0,   0,   4,   0,   0,   1,
		   0,   0,   0,   0,   8,   0,   0,   1,   0,   0,   0,   0,  16,   0,   0,   1,
		   0,   0,   0,   0,  32,   0,   0,   1,   0,   0,   0,   0,  64,   0,   0,   1,
		   0,   0,   0,   0,-128,   0,   0,   1,   0,   0,   0,   1,   0,   0,   0,   1,
		   0,   0,   0,   2,   0,   0,   0,   1,   0,   0,   0,   4,   0,   0,   0,   1,
		   0,   0,   0,   8,   0,   0,   0,   1,   0,   0,   0,  16,   0,   0,   0,   1,
		   0,   0,   0,  32,   0,   0,   0,   1,   0,   0,   0,  64,   0,   0,   0,   1,
		   0,   0,   0,-128,   0,   0,   0,   1,   0,   0,   1,   0,   0,   0,   0,   1,
		   0,   0,   2,   0,   0,   0,   0,   1,   0,   0,   4,   0,   0,   0,   0,   1,
		   0,   0,   8,   0,   0,   0,   0,   1,   0,   0,  16,   0,   0,   0,   0,   1,
		   0,   0,  32,   0,   0,   0,   0,   1,   0,   0,  64,   0,   0,   0,   0,   1,
		   0,   0,-128,   0,   0,   0,   0,   1,   0,   1,   0,   0,   0,   0,   0,   1,
		   0,   2,   0,   0,   0,   0,   0,   1,   0,   4,   0,   0,   0,   0,   0,   1,
		   0,   8,   0,   0,   0,   0,   0,   1,   0,  16,   0,   0,   0,   0,   0,   1,
		   0,  32,   0,   0,   0,   0,   0,   1,   0,  64,   0,   0,   0,   0,   0,   1,
		   0,-128,   0,   0,   0,   0,   0,   1,   1,   0,   0,   0,   0,   0,   0,   1,
		   2,   0,   0,   0,   0,   0,   0,   1,   4,   0,   0,   0,   0,   0,   0,   1,
		   8,   0,   0,   0,   0,   0,   0,   1,  16,   0,   0,   0,   0,   0,   0,   1,
		  32,   0,   0,   0,   0,   0,   0,   1,  64,   0,   0,   0,   0,   0,   0,   1,
		-128,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   6,
		   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,  18,
		   0,   0,   0,   0,   0,   0,   0,  34,   0,   0,   0,   0,   0,   0,   0,  66,
		   0,   0,   0,   0,   0,   0,   0,-126,   0,   0,   0,   0,   0,   0,   1,   2,
		   0,   0,   0,   0,   0,   0,   2,   2,   0,   0,   0,   0,   0,   0,   4,   2,
		   0,   0,   0,   0,   0,   0,   8,   2,   0,   0,   0,   0,   0,   0,  16,   2,
		   0,   0,   0,   0,   0,   0,  32,   2,   0,   0,   0,   0,   0,   0,  64,   2,
		   0,   0,   0,   0,   0,   0,-128,   2,   0,   0,   0,   0,   0,   1,   0,   2,
		   0,   0,   0,   0,   0,   2,   0,   2,   0,   0,   0,   0,   0,   4,   0,   2,
		   0,   0,   0,   0,   0,   8,   0,   2,   0,   0,   0,   0,   0,  16,   0,   2,
		   0,   0,   0,   0,   0,  32,   0,   2,   0,   0,   0,   0,   0,  64,   0,   2,
		   0,   0,   0,   0,   0,-128,   0,   2,   0,   0,   0,   0,   1,   0,   0,   2,
		   0,   0,   0,   0,   2,   0,   0,   2,   0,   0,   0,   0,   4,   0,   0,   2,
		   0,   0,   0,   0,   8,   0,   0,   2,   0,   0,   0,   0,  16,   0,   0,   2,
		   0,   0,   0,   0,  32,   0,   0,   2,   0,   0,   0,   0,  64,   0,   0,   2,
		   0,   0,   0,   0,-128,   0,   0,   2,   0,   0,   0,   1,   0,   0,   0,   2,
		   0,   0,   0,   2,   0,   0,   0,   2,   0,   0,   0,   4,   0,   0,   0,   2,
		   0,   0,   0,   8,   0,   0,   0,   2,   0,   0,   0,  16,   0,   0,   0,   2,
		   0,   0,   0,  32,   0,   0,   0,   2,   0,   0,   0,  64,   0,   0,   0,   2,
		   0,   0,   0,-128,   0,   0,   0,   2,   0,   0,   1,   0,   0,   0,   0,   2,
		   0,   0,   2,   0,   0,   0,   0,   2,   0,   0,   4,   0,   0,   0,   0,   2,
		   0,   0,   8,   0,   0,   0,   0,   2,   0,   0,  16,   0,   0,   0,   0,   2,
		   0,   0,  32,   0,   0,   0,   0,   2,   0,   0,  64,   0,   0,   0,   0,   2,
		   0,   0,-128,   0,   0,   0,   0,   2,   0,   1,   0,   0,   0,   0,   0,   2,
		   0,   2,   0,   0,   0,   0,   0,   2,   0,   4,   0,   0,   0,   0,   0,   2,
		   0,   8,   0,   0,   0,   0,   0,   2,   0,  16,   0,   0,   0,   0,   0,   2,
		   0,  32,   0,   0,   0,   0,   0,   2,   0,  64,   0,   0,   0,   0,   0,   2,
		   0,-128,   0,   0,   0,   0,   0,   2,   1,   0,   0,   0,   0,   0,   0,   2,
		   2,   0,   0,   0,   0,   0,   0,   2,   4,   0,   0,   0,   0,   0,   0,   2,
		   8,   0,   0,   0,   0,   0,   0,   2,  16,   0,   0,   0,   0,   0,   0,   2,
		  32,   0,   0,   0,   0,   0,   0,   2,  64,   0,   0,   0,   0,   0,   0,   2,
		-128,   0,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,   0,   0,   0,  12,
		   0,   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   0,   0,   0,   0,  36,
		   0,   0,   0,   0,   0,   0,   0,  68,   0,   0,   0,   0,   0,   0,   0,-124,
		   0,   0,   0,   0,   0,   0,   1,   4,   0,   0,   0,   0,   0,   0,   2,   4,
		   0,   0,   0,   0,   0,   0,   4,   4,   0,   0,   0,   0,   0,   0,   8,   4,
		   0,   0,   0,   0,   0,   0,  16,   4,   0,   0,   0,   0,   0,   0,  32,   4,
		   0,   0,   0,   0,   0,   0,  64,   4,   0,   0,   0,   0,   0,   0,-128,   4,
		   0,   0,   0,   0,   0,   1,   0,   4,   0,   0,   0,   0,   0,   2,   0,   4,
		   0,   0,   0,   0,   0,   4,   0,   4,   0,   0,   0,   0,   0,   8,   0,   4,
		   0,   0,   0,   0,   0,  16,   0,   4,   0,   0,   0,   0,   0,  32,   0,   4,
		   0,   0,   0,   0,   0,  64,   0,   4,   0,   0,   0,   0,   0,-128,   0,   4,
		   0,   0,   0,   0,   1,   0,   0,   4,   0,   0,   0,   0,   2,   0,   0,   4,
		   0,   0,   0,   0,   4,   0,   0,   4,   0,   0,   0,   0,   8,   0,   0,   4,
		   0,   0,   0,   0,  16,   0,   0,   4,   0,   0,   0,   0,  32,   0,   0,   4,
		   0,   0,   0,   0,  64,   0,   0,   4,   0,   0,   0,   0,-128,   0,   0,   4,
		   0,   0,   0,   1,   0,   0,   0,   4,   0,   0,   0,   2,   0,   0,   0,   4,
		   0,   0,   0,   4,   0,   0,   0,   4,   0,   0,   0,   8,   0,   0,   0,   4,
		   0,   0,   0,  16,   0,   0,   0,   4,   0,   0,   0,  32,   0,   0,   0,   4,
		   0,   0,   0,  64,   0,   0,   0,   4,   0,   0,   0,-128,   0,   0,   0,   4,
		   0,   0,   1,   0,   0,   0,   0,   4,   0,   0,   2,   0,   0,   0,   0,   4,
		   0,   0,   4,   0,   0,   0,   0,   4,   0,   0,   8,   0,   0,   0,   0,   4,
		   0,   0,  16,   0,   0,   0,   0,   4,   0,   0,  32,   0,   0,   0,   0,   4,
		   0,   0,  64,   0,   0,   0,   0,   4,   0,   0,-128,   0,   0,   0,   0,   4,
		   0,   1,   0,   0,   0,   0,   0,   4,   0,   2,   0,   0,   0,   0,   0,   4,
		   0,   4,   0,   0,   0,   0,   0,   4,   0,   8,   0,   0,   0,   0,   0,   4,
		   0,  16,   0,   0,   0,   0,   0,   4,   0,  32,   0,   0,   0,   0,   0,   4,
		   0,  64,   0,   0,   0,   0,   0,   4,   0,-128,   0,   0,   0,   0,   0,   4,
		   1,   0,   0,   0,   0,   0,   0,   4,   2,   0,   0,   0,   0,   0,   0,   4,
		   4,   0,   0,   0,   0,   0,   0,   4,   8,   0,   0,   0,   0,   0,   0,   4,
		  16,   0,   0,   0,   0,   0,   0,   4,  32,   0,   0,   0,   0,   0,   0,   4,
		  64,   0,   0,   0,   0,   0,   0,   4,-128,   0,   0,   0,   0,   0,   0,   4,
		   0,   0,   0,   0,   0,   0,   0,  24,   0,   0,   0,   0,   0,   0,   0,  40,
		   0,   0,   0,   0,   0,   0,   0,  72,   0,   0,   0,   0,   0,   0,   0,-120,
		   0,   0,   0,   0,   0,   0,   1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 119,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, -73,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -41,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, -25, 127,  -1,  -1,  -1,  -1,  -1,  -1,  -5,
		 -65,  -1,  -1,  -1,  -1,  -1,  -1,  -5, -33,  -1,  -1,  -1,  -1,  -1,  -1,  -5,
		 -17,  -1,  -1,  -1,  -1,  -1,  -1,  -5,  -9,  -1,  -1,  -1,  -1,  -1,  -1,  -5,
		  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -5,  -3,  -1,  -1,  -1,  -1,  -1,  -1,  -5,
		  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -5,  -1, 127,  -1,  -1,  -1,  -1,  -1,  -5,
		  -1, -65,  -1,  -1,  -1,  -1,  -1,  -5,  -1, -33,  -1,  -1,  -1,  -1,  -1,  -5,
		  -1, -17,  -1,  -1,  -1,  -1,  -1,  -5,  -1,  -9,  -1,  -1,  -1,  -1,  -1,  -5,
		  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -5,  -1,  -3,  -1,  -1,  -1,  -1,  -1,  -5,
		  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -5,  -1,  -1, 127,  -1,  -1,  -1,  -1,  -5,
		  -1,  -1, -65,  -1,  -1,  -1,  -1,  -5,  -1,  -1, -33,  -1,  -1,  -1,  -1,  -5,
		  -1,  -1, -17,  -1,  -1,  -1,  -1,  -5,  -1,  -1,  -9,  -1,  -1,  -1,  -1,  -5,
		  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -5,  -1,  -1,  -3,  -1,  -1,  -1,  -1,  -5,
		  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -5,  -1,  -1,  -1, 127,  -1,  -1,  -1,  -5,
		  -1,  -1,  -1, -65,  -1,  -1,  -1,  -5,  -1,  -1,  -1, -33,  -1,  -1,  -1,  -5,
		  -1,  -1,  -1, -17,  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -5,
		  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -3,  -1,  -1,  -1,  -5,
		  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -1, 127,  -1,  -1,  -5,
		  -1,  -1,  -1,  -1, -65,  -1,  -1,  -5,  -1,  -1,  -1,  -1, -33,  -1,  -1,  -5,
		  -1,  -1,  -1,  -1, -17,  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -9,  -1,  -1,  -5,
		  -1,  -1,  -1,  -1,  -5,  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -3,  -1,  -1,  -5,
		  -1,  -1,  -1,  -1,  -2,  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -1, 127,  -1,  -5,
		  -1,  -1,  -1,  -1,  -1, -65,  -1,  -5,  -1,  -1,  -1,  -1,  -1, -33,  -1,  -5,
		  -1,  -1,  -1,  -1,  -1, -17,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -9,  -1,  -5,
		  -1,  -1,  -1,  -1,  -1,  -5,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -5,
		  -1,  -1,  -1,  -1,  -1,  -2,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -1, 127,  -5,
		  -1,  -1,  -1,  -1,  -1,  -1, -65,  -5,  -1,  -1,  -1,  -1,  -1,  -1, -33,  -5,
		  -1,  -1,  -1,  -1,  -1,  -1, -17,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -9,  -5,
		  -1,  -1,  -1,  -1,  -1,  -1,  -5,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -5,
		  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 123,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, -69,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -37,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, -21,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -13,
		 127,  -1,  -1,  -1,  -1,  -1,  -1,  -3, -65,  -1,  -1,  -1,  -1,  -1,  -1,  -3,
		 -33,  -1,  -1,  -1,  -1,  -1,  -1,  -3, -17,  -1,  -1,  -1,  -1,  -1,  -1,  -3,
		  -9,  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -3,
		  -3,  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -3,
		  -1, 127,  -1,  -1,  -1,  -1,  -1,  -3,  -1, -65,  -1,  -1,  -1,  -1,  -1,  -3,
		  -1, -33,  -1,  -1,  -1,  -1,  -1,  -3,  -1, -17,  -1,  -1,  -1,  -1,  -1,  -3,
		  -1,  -9,  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -3,
		  -1,  -3,  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -3,
		  -1,  -1, 127,  -1,  -1,  -1,  -1,  -3,  -1,  -1, -65,  -1,  -1,  -1,  -1,  -3,
		  -1,  -1, -33,  -1,  -1,  -1,  -1,  -3,  -1,  -1, -17,  -1,  -1,  -1,  -1,  -3,
		  -1,  -1,  -9,  -1,  -1,  -1,  -1,  -3,  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -3,
		  -1,  -1,  -3,  -1,  -1,  -1,  -1,  -3,  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -3,
		  -1,  -1,  -1, 127,  -1,  -1,  -1,  -3,  -1,  -1,  -1, -65,  -1,  -1,  -1,  -3,
		  -1,  -1,  -1, -33,  -1,  -1,  -1,  -3,  -1,  -1,  -1, -17,  -1,  -1,  -1,  -3,
		  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -3,  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -3,
		  -1,  -1,  -1,  -3,  -1,  -1,  -1,  -3,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -3,
		  -1,  -1,  -1,  -1, 127,  -1,  -1,  -3,  -1,  -1,  -1,  -1, -65,  -1,  -1,  -3,
		  -1,  -1,  -1,  -1, -33,  -1,  -1,  -3,  -1,  -1,  -1,  -1, -17,  -1,  -1,  -3,
		  -1,  -1,  -1,  -1,  -9,  -1,  -1,  -3,  -1,  -1,  -1,  -1,  -5,  -1,  -1,  -3,
		  -1,  -1,  -1,  -1,  -3,  -1,  -1,  -3,  -1,  -1,  -1,  -1,  -2,  -1,  -1,  -3,
		  -1,  -1,  -1,  -1,  -1, 127,  -1,  -3,  -1,  -1,  -1,  -1,  -1, -65,  -1,  -3,
		  -1,  -1,  -1,  -1,  -1, -33,  -1,  -3,  -1,  -1,  -1,  -1,  -1, -17,  -1,  -3,
		  -1,  -1,  -1,  -1,  -1,  -9,  -1,  -3,  -1,  -1,  -1,  -1,  -1,  -5,  -1,  -3,
		  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -3,  -1,  -1,  -1,  -1,  -1,  -2,  -1,  -3,
		  -1,  -1,  -1,  -1,  -1,  -1, 127,  -3,  -1,  -1,  -1,  -1,  -1,  -1, -65,  -3,
		  -1,  -1,  -1,  -1,  -1,  -1, -33,  -3,  -1,  -1,  -1,  -1,  -1,  -1, -17,  -3,
		  -1,  -1,  -1,  -1,  -1,  -1,  -9,  -3,  -1,  -1,  -1,  -1,  -1,  -1,  -5,  -3,
		  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -3,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -3,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, 125,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -67,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, -35,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -19,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, -11,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -7,
		 127,  -1,  -1,  -1,  -1,  -1,  -1,  -2, -65,  -1,  -1,  -1,  -1,  -1,  -1,  -2,
		 -33,  -1,  -1,  -1,  -1,  -1,  -1,  -2, -17,  -1,  -1,  -1,  -1,  -1,  -1,  -2,
		  -9,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -2,
		  -3,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -2,
		  -1, 127,  -1,  -1,  -1,  -1,  -1,  -2,  -1, -65,  -1,  -1,  -1,  -1,  -1,  -2,
		  -1, -33,  -1,  -1,  -1,  -1,  -1,  -2,  -1, -17,  -1,  -1,  -1,  -1,  -1,  -2,
		  -1,  -9,  -1,  -1,  -1,  -1,  -1,  -2,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -2,
		  -1,  -3,  -1,  -1,  -1,  -1,  -1,  -2,  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -2,
		  -1,  -1, 127,  -1,  -1,  -1,  -1,  -2,  -1,  -1, -65,  -1,  -1,  -1,  -1,  -2,
		  -1,  -1, -33,  -1,  -1,  -1,  -1,  -2,  -1,  -1, -17,  -1,  -1,  -1,  -1,  -2,
		  -1,  -1,  -9,  -1,  -1,  -1,  -1,  -2,  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -2,
		  -1,  -1,  -3,  -1,  -1,  -1,  -1,  -2,  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -2,
		  -1,  -1,  -1, 127,  -1,  -1,  -1,  -2,  -1,  -1,  -1, -65,  -1,  -1,  -1,  -2,
		  -1,  -1,  -1, -33,  -1,  -1,  -1,  -2,  -1,  -1,  -1, -17,  -1,  -1,  -1,  -2,
		  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -2,
		  -1,  -1,  -1,  -3,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -2,
		  -1,  -1,  -1,  -1, 127,  -1,  -1,  -2,  -1,  -1,  -1,  -1, -65,  -1,  -1,  -2,
		  -1,  -1,  -1,  -1, -33,  -1,  -1,  -2,  -1,  -1,  -1,  -1, -17,  -1,  -1,  -2,
		  -1,  -1,  -1,  -1,  -9,  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -5,  -1,  -1,  -2,
		  -1,  -1,  -1,  -1,  -3,  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -2,  -1,  -1,  -2,
		  -1,  -1,  -1,  -1,  -1, 127,  -1,  -2,  -1,  -1,  -1,  -1,  -1, -65,  -1,  -2,
		  -1,  -1,  -1,  -1,  -1, -33,  -1,  -2,  -1,  -1,  -1,  -1,  -1, -17,  -1,  -2,
		  -1,  -1,  -1,  -1,  -1,  -9,  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -5,  -1,  -2,
		  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -2,  -1,  -2,
		  -1,  -1,  -1,  -1,  -1,  -1, 127,  -2,  -1,  -1,  -1,  -1,  -1,  -1, -65,  -2,
		  -1,  -1,  -1,  -1,  -1,  -1, -33,  -2,  -1,  -1,  -1,  -1,  -1,  -1, -17,  -2,
		  -1,  -1,  -1,  -1,  -1,  -1,  -9,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -5,  -2,
		  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, 126,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -66,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, -34,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -18,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, -10,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -6,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -4, 127,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
		 -65,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -33,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
		 -17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
		  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
		  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 127,  -1,  -1,  -1,  -1,  -1,  -1,
		  -1, -65,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -33,  -1,  -1,  -1,  -1,  -1,  -1,
		  -1, -17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -1,  -1,  -1,
		  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -1,  -1,  -1,  -1,  -1,
		  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 127,  -1,  -1,  -1,  -1,  -1,
		  -1,  -1, -65,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -33,  -1,  -1,  -1,  -1,  -1,
		  -1,  -1, -17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -1,  -1,
		  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -1,  -1,  -1,  -1,
		  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 127,  -1,  -1,  -1,  -1,
		  -1,  -1,  -1, -65,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -33,  -1,  -1,  -1,  -1,
		  -1,  -1,  -1, -17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -9,  -1,  -1,  -1,  -1,
		  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -1,  -1,  -1,
		  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 127,  -1,  -1,  -1,
		  -1,  -1,  -1,  -1, -65,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -33,  -1,  -1,  -1,
		  -1,  -1,  -1,  -1, -17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -9,  -1,  -1,  -1,
		  -1,  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -1,  -1,
		  -1,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 127,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1, -65,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -33,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1, -17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -9,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -1,  -1,
		  -1,  -1,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 127,  -1,
		  -1,  -1,  -1,  -1,  -1,  -1, -65,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -33,  -1,
		  -1,  -1,  -1,  -1,  -1,  -1, -17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -9,  -1,
		  -1,  -1,  -1,  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -3,  -1,
		  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 127,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, -65,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -33,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1, -17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -9,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -5,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -3,
		  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
	};

	private class TestContainer implements Container {
		byte[] bytes = new byte[genome.length];

		@Override
		public void writeGenome(DataOutput out) throws IOException {
			out.write(bytes);
		}

		@Override
		public void readGenome(DataInput in) throws IOException {
			in.readFully(bytes);
		}
	}

	private static class InverterOutputStream extends FilterOutputStream {
		public InverterOutputStream(OutputStream out) {
			super(out);
		}
		@Override public void write(int b) throws IOException {
			out.write(b ^ 0xFF);
		}
	}
	
	private TestContainer individual;
	private ByteArrayOutputStream bytes;
	private DataOutputStream out;
	private DataInputStream in;

	@Before public void setUp() {
		bytes = new ByteArrayOutputStream();
		out = new DataOutputStream(bytes);
		individual = new TestContainer();
	}
	@After public void tearDown() {
		bytes = null;
		out = null;
		individual = null;
	}

	@Test
	public void testDataOutputStreamWrite() throws IOException {
		for (int b : byteGenoIn)
			out.write(b);
		assertArrayEquals(byteGenoOut, bytes.toByteArray());
	}

	@Test
	public void testDataOutputStreamReadFully() throws IOException {
		byte[] bytes = new byte[byteGenoIn.length];
		in = new DataInputStream(new ByteArrayInputStream(byteGenoOut));
		in.readFully(bytes);
		for (int i = 0; i < byteGenoIn.length; i++)
			assertEquals((byte) byteGenoIn[i], bytes[i]);
	}

	@Test
	public void testDataOutputStreamWriteByte() throws IOException {
		for (int b : byteGenoIn)
			out.writeByte(b);
		assertArrayEquals(byteGenoOut, bytes.toByteArray());
		//for (byte b : bytes.toByteArray())
		//	System.out.printf("%8s\n", Integer.toBinaryString(b < 0 ? b + 256 : b));
	}

	@Test
	public void testDataOutputStreamWriteBytes() throws IOException {
		out.writeBytes(bytesGenoIn);
		assertArrayEquals(bytesGenoOut, bytes.toByteArray());
	}

	@Test
	public void testDataOutputStreamReadByte() throws IOException {
		in = new DataInputStream(new ByteArrayInputStream(byteGenoOut));
		for (int b : byteGenoIn)
			assertEquals((byte) b, in.readByte());
	}

	@Test
	public void testDataOutputStreamReadUnsignedByte() throws IOException {
		in = new DataInputStream(new ByteArrayInputStream(byteGenoOut));
		for (int b : byteGenoIn)
			assertEquals(b, in.readUnsignedByte());
	}

	@Test
	public void testDataOutputStreamWriteBoolean() throws IOException {
		out.writeBoolean(true);
		out.writeBoolean(false);
		assertArrayEquals(new byte[] {1, 0}, bytes.toByteArray());
	}

	@Test
	public void testDataOutputStreamReadBoolean() throws IOException {
		in = new DataInputStream(new ByteArrayInputStream(new byte[] {1, 0}));
		assertEquals(true, in.readBoolean());
		assertEquals(false, in.readBoolean());
	}

	@Test
	public void testDataOutputStreamWriteShort() throws IOException {
		for (int i : shortGenoIn)
			out.writeShort(i);
		assertArrayEquals(shortGenoOut, bytes.toByteArray());
	}

	@Test
	public void testDataOutputStreamReadShort() throws IOException {
		in = new DataInputStream(new ByteArrayInputStream(shortGenoOut));
		for (int b : shortGenoIn)
			assertEquals((short) b, in.readShort());
	}

	@Test
	public void testDataOutputStreamReadUnsignedShort() throws IOException {
		in = new DataInputStream(new ByteArrayInputStream(shortGenoOut));
		for (int b : shortGenoIn)
			assertEquals(b, in.readUnsignedShort());
	}

	@Test
	public void testDataOutputStreamWriteChar() throws IOException {
		for (int i : shortGenoIn)
			out.writeChar(i);
		assertArrayEquals(shortGenoOut, bytes.toByteArray());
	}
	
	@Test
	public void testDataOutputStreamWriteChars() throws IOException {
		out.writeChars(charsGenoIn);
		assertArrayEquals(charsGenoOut, bytes.toByteArray());
	}
	
	@Test
	public void testDataOutputStreamWriteFloat() throws IOException {
		out.writeFloat(0);
		out.writeFloat(1);
		out.writeFloat(2);
		out.writeFloat(0.5f);
		assertArrayEquals(new byte[] {0, 0, 0, 0, 112, -36, 15, 6, 2, 73, -98, -38, 14, 51, 30, 38}, bytes.toByteArray());
		/*/
		int i = 0;
		for (byte b : bytes.toByteArray())
			if (++i % 16 == 0)
				System.out.printf("%d,\n", b);
			else
				System.out.printf("%d, ", b);
		//
		int i = 0;
		for (byte b : bytes.toByteArray())
			if (++i % 4 == 0)
				System.out.printf("%8s\n", Integer.toBinaryString(b < 0 ? b + 256 : b));
			else
				System.out.printf("%8s", Integer.toBinaryString(b < 0 ? b + 256 : b));
		/**/
	}

	@Test
	public void testDataOutputStreamWriteInt() throws IOException {
		for (int i : intGenoIn)
			out.writeInt(i++);
		assertArrayEquals(intGenoOut, bytes.toByteArray());
		/*/
		i = 0;
		for (byte b : bytes.toByteArray())
			if (++i % 16 == 0)
				System.out.printf("%4d,\n", b);
			else
				System.out.printf("%4d,", b);
		//
		i = 0;
		for (byte b : bytes.toByteArray())
			if (++i % 4 == 0)
				System.out.printf("%8s\n", Integer.toBinaryString(b < 0 ? b + 256 : b));
			else
				System.out.printf("%8s", Integer.toBinaryString(b < 0 ? b + 256 : b));
		/**/
	}

	@Test
	public void testDataOutputStreamReadInt() throws IOException {
		in = new DataInputStream(new ByteArrayInputStream(intGenoOut));
		for (int b : intGenoIn)
			assertEquals(b, in.readInt());
	}

	@Test
	public void testDataOutputStreamWriteDouble() throws IOException {
		out.writeDouble(0);
		out.writeDouble(1);
		out.writeDouble(2);
		out.writeDouble(0.5);
		assertArrayEquals(new byte[] {0,0,0,0,0,0,0,0,-116,18,121,3,53,61,122,52,-31,72,67,114,100,113,-71,-44,-8,89,-48,-93,108,-119,40,-76}, bytes.toByteArray());
		/*/
		int i = 0;
		for (byte b : bytes.toByteArray())
			if (++i % 16 == 0)
				System.out.printf("%d,\n", b);
			else
				System.out.printf("%d,", b);
		//
		int i = 0;
		for (byte b : bytes.toByteArray())
			if (++i % 8 == 0)
				System.out.printf("%8s\n", Integer.toBinaryString(b < 0 ? b + 256 : b));
			else
				System.out.printf("%8s", Integer.toBinaryString(b < 0 ? b + 256 : b));
		/**/
	}

	@Test
	public void testDataOutputStreamWriteLong() throws IOException {
		for (long i : longGenoIn)
			out.writeLong(i);
		assertArrayEquals(longGenoOut, bytes.toByteArray());
		/*/
		i = 0;
		for (byte b : bytes.toByteArray())
			if (++i % 16 == 0)
				System.out.printf("%4d,\n", b);
			else
				System.out.printf("%4d,", b);
		//
		i = 0;
		for (byte b : bytes.toByteArray())
			if (++i % 8 == 0)
				System.out.printf("%8s\n", Integer.toBinaryString(b < 0 ? b + 256 : b));
			else
				System.out.printf("%8s", Integer.toBinaryString(b < 0 ? b + 256 : b));
		/**/
	}

	@Test
	public void testDataOutputStreamReadLong() throws IOException {
		in = new DataInputStream(new ByteArrayInputStream(longGenoOut));
		for (long b : longGenoIn)
			assertEquals(b, in.readLong());
	}

	@Test
	public void testSetGenomeBytes() throws IOException {
		Genomes.setGenomeBytes(individual, genome);
		assertArrayEquals(phenome, individual.bytes);
	}

	@Test
	public void testGetGenomeBytesContainer() throws IOException {
		individual.bytes = phenome;
		assertArrayEquals(genome, Genomes.getGenomeBytes(individual));
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testGetGenomeFilter() throws Exception {
		individual.bytes = phenome;
		assertNotNull(Genomes.getGenomeFilters(individual, InverterOutputStream.class));
		assertArrayEquals(invGenome, Genomes.getGenomeBytes(individual));
	}

}
